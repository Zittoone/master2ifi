/*
 * generated by Xtext 2.12.0
 */
grammar InternalSmartHome;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package fr.unice.polytech.alexisc.smarthomedsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.unice.polytech.alexisc.smarthomedsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import fr.unice.polytech.alexisc.smarthomedsl.services.SmartHomeGrammarAccess;

}
@parser::members {
	private SmartHomeGrammarAccess grammarAccess;

	public void setGrammarAccess(SmartHomeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleHome
entryRuleHome
:
{ before(grammarAccess.getHomeRule()); }
	 ruleHome
{ after(grammarAccess.getHomeRule()); } 
	 EOF 
;

// Rule Home
ruleHome 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHomeAccess().getGroup()); }
		(rule__Home__Group__0)
		{ after(grammarAccess.getHomeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSensor
entryRuleSensor
:
{ before(grammarAccess.getSensorRule()); }
	 ruleSensor
{ after(grammarAccess.getSensorRule()); } 
	 EOF 
;

// Rule Sensor
ruleSensor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSensorAccess().getGroup()); }
		(rule__Sensor__Group__0)
		{ after(grammarAccess.getSensorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Home__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Home__Group__0__Impl
	rule__Home__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Home__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHomeAccess().getHomeAction_0()); }
	()
	{ after(grammarAccess.getHomeAccess().getHomeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Home__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Home__Group__1__Impl
	rule__Home__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Home__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHomeAccess().getHomeKeyword_1()); }
	'Home'
	{ after(grammarAccess.getHomeAccess().getHomeKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Home__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Home__Group__2__Impl
	rule__Home__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Home__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHomeAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getHomeAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Home__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Home__Group__3__Impl
	rule__Home__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Home__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHomeAccess().getGroup_3()); }
	(rule__Home__Group_3__0)?
	{ after(grammarAccess.getHomeAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Home__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Home__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Home__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHomeAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getHomeAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Home__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Home__Group_3__0__Impl
	rule__Home__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Home__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHomeAccess().getSensorsKeyword_3_0()); }
	'sensors'
	{ after(grammarAccess.getHomeAccess().getSensorsKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Home__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Home__Group_3__1__Impl
	rule__Home__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Home__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHomeAccess().getLeftCurlyBracketKeyword_3_1()); }
	'{'
	{ after(grammarAccess.getHomeAccess().getLeftCurlyBracketKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Home__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Home__Group_3__2__Impl
	rule__Home__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Home__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHomeAccess().getSensorsAssignment_3_2()); }
	(rule__Home__SensorsAssignment_3_2)
	{ after(grammarAccess.getHomeAccess().getSensorsAssignment_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Home__Group_3__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Home__Group_3__3__Impl
	rule__Home__Group_3__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Home__Group_3__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHomeAccess().getGroup_3_3()); }
	(rule__Home__Group_3_3__0)*
	{ after(grammarAccess.getHomeAccess().getGroup_3_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Home__Group_3__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Home__Group_3__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Home__Group_3__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHomeAccess().getRightCurlyBracketKeyword_3_4()); }
	'}'
	{ after(grammarAccess.getHomeAccess().getRightCurlyBracketKeyword_3_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Home__Group_3_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Home__Group_3_3__0__Impl
	rule__Home__Group_3_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Home__Group_3_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHomeAccess().getCommaKeyword_3_3_0()); }
	','
	{ after(grammarAccess.getHomeAccess().getCommaKeyword_3_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Home__Group_3_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Home__Group_3_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Home__Group_3_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHomeAccess().getSensorsAssignment_3_3_1()); }
	(rule__Home__SensorsAssignment_3_3_1)
	{ after(grammarAccess.getHomeAccess().getSensorsAssignment_3_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sensor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__0__Impl
	rule__Sensor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getSensorAction_0()); }
	()
	{ after(grammarAccess.getSensorAccess().getSensorAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__1__Impl
	rule__Sensor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getSensorKeyword_1()); }
	'Sensor'
	{ after(grammarAccess.getSensorAccess().getSensorKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getNameAssignment_2()); }
	(rule__Sensor__NameAssignment_2)
	{ after(grammarAccess.getSensorAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Home__SensorsAssignment_3_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHomeAccess().getSensorsSensorParserRuleCall_3_2_0()); }
		ruleSensor
		{ after(grammarAccess.getHomeAccess().getSensorsSensorParserRuleCall_3_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Home__SensorsAssignment_3_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHomeAccess().getSensorsSensorParserRuleCall_3_3_1_0()); }
		ruleSensor
		{ after(grammarAccess.getHomeAccess().getSensorsSensorParserRuleCall_3_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getSensorAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
