// automatically generated by Xtext
grammar smarthome.dsl.Dsl with org.eclipse.xtext.common.Terminals

import "http://www.alexiscouvreur.fr/smarthome" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Home returns Home:
	{Home}
	'Home'
	'{'
		('rooms' '{' rooms+=Room ( "," rooms+=Room)* '}' )?
		('persons' '{' persons+=Person ( "," persons+=Person)* '}' )?
		('patterns' '{' patterns+=Pattern ( "," patterns+=Pattern)* '}' )?
	'}';




Sensor returns Sensor:
	AnalogSensor | DigitalSensor;



Predicate returns Predicate:
	SensorPredicate | PersonPredicate;


Room returns Room:
	{Room}
	'Room'
	name=EString
	'{'
		('sensors' '{' sensors+=Sensor ( "," sensors+=Sensor)* '}' )?
	'}';

Person returns Person:
	{Person}
	'Person'
	name=EString;

Pattern returns Pattern:
	{Pattern}
	'Pattern'
	name=EString
	'{'
		('rules' '(' rules+=[Rule|EString] ( "," rules+=[Rule|EString])* ')' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

Value returns Value:
	{Value}
	'Value'
	'{'
		('value' value=EDouble)?
	'}';

AnalogSensor returns AnalogSensor:
	{AnalogSensor}
	'AnalogSensor'
	name=EString
	'{'
		('value' value=Value)?
	'}';

DigitalSensor returns DigitalSensor:
	{DigitalSensor}
	'DigitalSensor'
	name=EString
	'{'
		('value' value=Value)?
	'}';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

Rule returns Rule:
	{Rule}
	'Rule'
	'{'
		('predicates' '(' predicates+=[Predicate|EString] ( "," predicates+=[Predicate|EString])* ')' )?
		('duration' duration=Duration)?
	'}';

Duration returns Duration:
	{Duration}
	'Duration'
	'{'
		('time' time=EInt)?
		('precision' precision=Precision)?
	'}';

SensorPredicate returns SensorPredicate:
	{SensorPredicate}
	'SensorPredicate'
	'{'
		('operator' operator=Operator)?
		('sensor' sensor=[Sensor|EString])?
		('value' value=Value)?
	'}';

PersonPredicate returns PersonPredicate:
	{PersonPredicate}
	'PersonPredicate'
	'{'
		('activity' activity=Activity)?
		('person' person=[Person|EString])?
	'}';

enum Operator returns Operator:
				superior = 'superior' | inferior = 'inferior' | equal = 'equal';

enum Activity returns Activity:
				standing = 'standing' | laying = 'laying' | sitting = 'sitting';

EInt returns ecore::EInt:
	'-'? INT;

enum Precision returns Precision:
				ms = 'ms' | s = 's' | m = 'm';
