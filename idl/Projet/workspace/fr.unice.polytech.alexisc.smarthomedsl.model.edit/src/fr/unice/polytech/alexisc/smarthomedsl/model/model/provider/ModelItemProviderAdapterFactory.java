/**
 */
package fr.unice.polytech.alexisc.smarthomedsl.model.model.provider;

import fr.unice.polytech.alexisc.smarthomedsl.model.model.util.ModelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ModelItemProviderAdapterFactory extends ModelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ModelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.Home} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HomeItemProvider homeItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.Home}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHomeAdapter() {
		if (homeItemProvider == null) {
			homeItemProvider = new HomeItemProvider(this);
		}

		return homeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.NamedEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamedEntityItemProvider namedEntityItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.NamedEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamedEntityAdapter() {
		if (namedEntityItemProvider == null) {
			namedEntityItemProvider = new NamedEntityItemProvider(this);
		}

		return namedEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.Sensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensorItemProvider sensorItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.Sensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensorAdapter() {
		if (sensorItemProvider == null) {
			sensorItemProvider = new SensorItemProvider(this);
		}

		return sensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.AnalogSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnalogSensorItemProvider analogSensorItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.AnalogSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnalogSensorAdapter() {
		if (analogSensorItemProvider == null) {
			analogSensorItemProvider = new AnalogSensorItemProvider(this);
		}

		return analogSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.DigitalSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DigitalSensorItemProvider digitalSensorItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.DigitalSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDigitalSensorAdapter() {
		if (digitalSensorItemProvider == null) {
			digitalSensorItemProvider = new DigitalSensorItemProvider(this);
		}

		return digitalSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.Rule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleItemProvider ruleItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.Rule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleAdapter() {
		if (ruleItemProvider == null) {
			ruleItemProvider = new RuleItemProvider(this);
		}

		return ruleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.Pattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PatternItemProvider patternItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.Pattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPatternAdapter() {
		if (patternItemProvider == null) {
			patternItemProvider = new PatternItemProvider(this);
		}

		return patternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.Room} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoomItemProvider roomItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.Room}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoomAdapter() {
		if (roomItemProvider == null) {
			roomItemProvider = new RoomItemProvider(this);
		}

		return roomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.SensorCSV} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensorCSVItemProvider sensorCSVItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.SensorCSV}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensorCSVAdapter() {
		if (sensorCSVItemProvider == null) {
			sensorCSVItemProvider = new SensorCSVItemProvider(this);
		}

		return sensorCSVItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.Person} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PersonItemProvider personItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.Person}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPersonAdapter() {
		if (personItemProvider == null) {
			personItemProvider = new PersonItemProvider(this);
		}

		return personItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.Tag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TagItemProvider tagItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.Tag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTagAdapter() {
		if (tagItemProvider == null) {
			tagItemProvider = new TagItemProvider(this);
		}

		return tagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.Operand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperandItemProvider operandItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.Operand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperandAdapter() {
		if (operandItemProvider == null) {
			operandItemProvider = new OperandItemProvider(this);
		}

		return operandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.Duration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DurationItemProvider durationItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.Duration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDurationAdapter() {
		if (durationItemProvider == null) {
			durationItemProvider = new DurationItemProvider(this);
		}

		return durationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.StaticSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StaticSensorItemProvider staticSensorItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.StaticSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStaticSensorAdapter() {
		if (staticSensorItemProvider == null) {
			staticSensorItemProvider = new StaticSensorItemProvider(this);
		}

		return staticSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.PersonPredicate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PersonPredicateItemProvider personPredicateItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.PersonPredicate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPersonPredicateAdapter() {
		if (personPredicateItemProvider == null) {
			personPredicateItemProvider = new PersonPredicateItemProvider(this);
		}

		return personPredicateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.SensorPredicate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensorPredicateItemProvider sensorPredicateItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.polytech.alexisc.smarthomedsl.model.model.SensorPredicate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensorPredicateAdapter() {
		if (sensorPredicateItemProvider == null) {
			sensorPredicateItemProvider = new SensorPredicateItemProvider(this);
		}

		return sensorPredicateItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (homeItemProvider != null) homeItemProvider.dispose();
		if (namedEntityItemProvider != null) namedEntityItemProvider.dispose();
		if (sensorItemProvider != null) sensorItemProvider.dispose();
		if (analogSensorItemProvider != null) analogSensorItemProvider.dispose();
		if (digitalSensorItemProvider != null) digitalSensorItemProvider.dispose();
		if (ruleItemProvider != null) ruleItemProvider.dispose();
		if (patternItemProvider != null) patternItemProvider.dispose();
		if (roomItemProvider != null) roomItemProvider.dispose();
		if (sensorCSVItemProvider != null) sensorCSVItemProvider.dispose();
		if (personItemProvider != null) personItemProvider.dispose();
		if (tagItemProvider != null) tagItemProvider.dispose();
		if (operandItemProvider != null) operandItemProvider.dispose();
		if (durationItemProvider != null) durationItemProvider.dispose();
		if (staticSensorItemProvider != null) staticSensorItemProvider.dispose();
		if (personPredicateItemProvider != null) personPredicateItemProvider.dispose();
		if (sensorPredicateItemProvider != null) sensorPredicateItemProvider.dispose();
	}

}
