// automatically generated by Xtext
grammar fr.unice.polytech.alexisc.smarthomedsl.SmartHome with org.eclipse.xtext.common.Terminals

import "http://www.alexiscouvreur.fr/model"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Home returns Home:
	{Home}
		('rooms' '{' rooms+=Room ( "," rooms+=Room)* '}')?
		('patterns' '{' activities+=Pattern ( "," activities+=Pattern)* '}' )?
		;


Room returns Room:
	{Room}
	'Room'
	name=EString
	'{'
		('sensors' '{' sensors+=(AnalogSensor | DigitalSensor | SensorCSV) ( "," sensors+=(AnalogSensor | DigitalSensor | SensorCSV))* '}' )?
	'}'
;

AnalogSensor returns AnalogSensor:
	{AnalogSensor}
	'AnalogSensor' name=EString 'on' location=EString 'reacts' 'to' type=EString
;

DigitalSensor returns DigitalSensor:
	{DigitalSensor}
	'DigitalSensor' name=EString 'on' location=EString 'reacts' 'to' type=EString
;

SensorCSV returns SensorCSV:
	{SensorCSV}
	'SensorCSV' name=EString 'from' file=EString
;

Pattern returns Pattern:
	{Pattern}
	'Activity'
	name=EString
	'{'
		('rules' '{' rules+=Rule ( "and" rules+=Rule)* '}' )?
	'}';

Rule returns Rule:
	{Rule}
	predicate=[Predicate | EString] ('for' duration=Duration)?
;

SensorPredicate returns SensorPredicate:
	{SensorPredicate}
	sensor=[Sensor | EString] operator=Operator value=INT 
;

PersonPredicate returns PersonPredicate:
	{PersonPredicate}
	person=[Person | EString] activity=Activity 
;

Operand returns Operand:
	{Operand}
	
;

Duration returns Duration:
	{Duration}
	duration=INT precision=Precision
;

enum Operator:
	equal='=' |
	inferior='<'|
	superior='>'
;

enum Precision:
	s='seconds'|
	ms='milliseconds'|
	m='minutes';

enum Activity:
	laying | sitting | standing
;

EString returns ecore::EString:
	STRING | ID;
