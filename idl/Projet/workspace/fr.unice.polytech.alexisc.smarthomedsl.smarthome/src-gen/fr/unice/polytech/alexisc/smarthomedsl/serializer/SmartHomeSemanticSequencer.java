/*
 * generated by Xtext 2.12.0
 */
package fr.unice.polytech.alexisc.smarthomedsl.serializer;

import com.google.inject.Inject;
import fr.unice.polytech.alexisc.smarthomedsl.model.model.Activity;
import fr.unice.polytech.alexisc.smarthomedsl.model.model.Home;
import fr.unice.polytech.alexisc.smarthomedsl.model.model.ModelPackage;
import fr.unice.polytech.alexisc.smarthomedsl.model.model.Room;
import fr.unice.polytech.alexisc.smarthomedsl.model.model.Sensor;
import fr.unice.polytech.alexisc.smarthomedsl.services.SmartHomeGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class SmartHomeSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SmartHomeGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ModelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ModelPackage.ACTIVITY:
				sequence_Activity(context, (Activity) semanticObject); 
				return; 
			case ModelPackage.HOME:
				sequence_Home(context, (Home) semanticObject); 
				return; 
			case ModelPackage.ROOM:
				sequence_Room(context, (Room) semanticObject); 
				return; 
			case ModelPackage.SENSOR:
				sequence_Sensor(context, (Sensor) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Activity returns Activity
	 *
	 * Constraint:
	 *     {Activity}
	 */
	protected void sequence_Activity(ISerializationContext context, Activity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Home returns Home
	 *
	 * Constraint:
	 *     ((rooms+=Room rooms+=Room*)? (activities+=Activity activities+=Activity*)?)
	 */
	protected void sequence_Home(ISerializationContext context, Home semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Room returns Room
	 *
	 * Constraint:
	 *     (name=EString (sensors+=Sensor sensors+=Sensor*)?)
	 */
	protected void sequence_Room(ISerializationContext context, Room semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Sensor returns Sensor
	 *
	 * Constraint:
	 *     (name=EString location=EString type=EString)
	 */
	protected void sequence_Sensor(ISerializationContext context, Sensor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.NAMED_ENTITY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.NAMED_ENTITY__NAME));
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.SENSOR__LOCATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.SENSOR__LOCATION));
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.SENSOR__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.SENSOR__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSensorAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSensorAccess().getLocationEStringParserRuleCall_4_0(), semanticObject.getLocation());
		feeder.accept(grammarAccess.getSensorAccess().getTypeEStringParserRuleCall_7_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
}
